---
import { Swiper, SwiperWrapper, SwiperPagination, SwiperButtonPrev, SwiperButtonNext } from "astro-swiper";

import type { SwiperOptions } from 'swiper/types';

interface Props {
  buttons?: boolean;
  long?: boolean;
  slides?: number;
  loop?: boolean;
  cls?: string;
  useGrid?: boolean;
}

const {
  buttons = false,
  long = false,
  slides = 1,
  loop = true,
  cls = '',
  useGrid = false,
} = Astro.props as Props;

const uid = `swiper-${Math.random().toString(36).substring(2, 9)}`;


const baseOptions: SwiperOptions = {
  speed: 400,
  autoHeight: long,
  slidesPerView: 1,
  slidesPerGroup: 1,
  grid: {
    rows: 1,
  },
  spaceBetween: 32,
  fadeEffect: {
    crossFade: true,
  },
  pagination: {
    el: `.${uid}-pagination`,
    clickable: true,
  },
  keyboard: {
    enabled: true,
    onlyInViewport: true,
    pageUpDown: true,
  },
  a11y: {
    prevSlideMessage: 'Previous',
    nextSlideMessage: 'Next',
  },
  loop,
  navigation: {
    nextEl: `.${uid}-next`,
    prevEl: `.${uid}-prev`,
  },
 breakpoints: {
    0: {
      slidesPerView: 1,
      grid: {
        rows: 1,
      },
      autoHeight: true
    },
    860: {
      slidesPerView: slides,
    }
  }
};

if (useGrid) {
  baseOptions.grid = {
    rows: 1,
    fill: 'row',
  } as any;
} 

---
<div class={`${buttons ? 'swiper-wrapper-container' : ''} ${cls}`}>
  <Swiper 
    options={baseOptions}
  >
    <SwiperWrapper>
      <slot />
    </SwiperWrapper>
    <SwiperPagination class={`swiper-pagination ${uid}-pagination`} />
  </Swiper>

  {buttons && <>
    <SwiperButtonPrev class={`swiper-button-prev ${uid}-prev`} />
    <SwiperButtonNext class={`swiper-button-next ${uid}-next`} />
  </>}
</div>

<script>
  const initNavigation = () => {
    const swiperEl = document.querySelector('.swiper') as any;
    const swiper = swiperEl?.swiper;

    if (swiper && swiper.navigation) {
      swiper.navigation.destroy();
      swiper.navigation.init();
      swiper.navigation.update();
    }
  };

  if (document.readyState === 'complete') {
    initNavigation();
  } else {
    window.addEventListener('load', initNavigation);
  }
</script>


<style is:global>

  .slides-grid .swiper-wrapper .swiper-slide  {
    align-items: unset !important;
  }

  @media screen and (max-width: 860px) {
     .slides-grid .swiper-wrapper {
      display: flex;
    }

    .slides-grid .swiper-wrapper .swiper-slide {
      align-items: center;
    }
  }
</style>

<style>
  .swiper-wrapper-container {
    position: relative;
    padding-left: 3rem; 
    padding-right: 3rem; 
  }

  .swiper {
    max-width: 1300px;
    margin: 0 auto;
    position: relative;
  }

  img {
    width: 100%;
  }

  .swiper-button-prev,
  .swiper-button-next {
    background-color: white;
    border: 1px solid #ccc;
    border-radius: 100%; 
    width: 40px;
    height: 40px;
    top: 50%;
    transform: translateY(-50%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: black;
    box-shadow: 0 2px 6px rgba(0,0,0,0.2);
    z-index: 10;
  }

  .swiper-button-prev:hover,
  .swiper-button-next:hover {
    background-color: #f3f3f3;
  }

  .swiper-button-prev {
    left: -15px; 
  }

  .swiper-button-next {
    right: -15px; 
  }

  .swiper-button-prev::after,
  .swiper-button-next::after {
    font-size: 16px;
    color: black;
  }

  @media screen and (max-width: 650px) {
    .swiper-wrapper-container {
      padding: 0;
    }

    .grid-slides {
      grid-template-columns: 1fr;
    }

    .grid-slides .swiper-slide {
      grid-column: auto !important;
    }

    .swiper-button-prev,
    .swiper-button-next {
      display: none;
    }
  }
</style>